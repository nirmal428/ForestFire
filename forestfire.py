# -*- coding: utf-8 -*-
"""ForestFire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wotJzAWslYQYzE7dQS9HoRq_rXDSrQUc

# EDA with Algerian Forest Fire

Dataset Link = https://www.kaggle.com/datasets/nitinchoudhary012/algerian-forest-fires-dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/Algerian_forest_fires_dataset.csv")

df.head()

df.info()

"""Data Cleaning"""

df[df.isnull().any(axis=1)]

df.loc[:122,"Region"]=0
df.loc[122:,"Region"]=1

df.head()

df.info()

df[['Region']]=df[['Region']].astype(int)

df.tail()

df.isnull().sum()

df=df.dropna().reset_index(drop=True)

df.head()

df.isnull().sum()

df=df.drop(122).reset_index(drop=True)

df.iloc[[122]]

df.columns

df.columns=df.columns.str.strip()
df.columns

"""Change the required cloumns as integer Data type"""

df[['day', 'month', 'year', 'Temperature', 'RH', 'Ws']]=df[['day', 'month', 'year', 'Temperature', 'RH', 'Ws']].astype(int)

df.info()

"""Changing the other columns float data type"""

objects=[feature for feature in df.columns if df[feature].dtypes=='O']

objects

for i in objects:
  if i!='Classes':
    df[i]=df[i].astype(float)

df.info()

df.describe()

"""save file after cleaning"""

df.to_csv("Algerian_forest_fire_cleaned_dataset.csv",index=False)

"""# EDA"""

df_copy=df.drop(['day','month','year'],axis=1)

df_copy.head()

df_copy['Classes'].value_counts()

df_copy['Classes']=np.where(df_copy["Classes"].str.contains("not fire"),0,1)

df_copy.head()

df_copy.tail()

df_copy['Classes'].value_counts()

import seaborn as sns
plt.style.use('seaborn-v0_8-darkgrid')
df_copy.hist(bins=50,figsize=(20,15))
plt.show()

percentage=df_copy['Classes'].value_counts()/len(df_copy)*100

classlabel=["Fire","Not Fire"]
plt.pie(percentage,labels=classlabel,autopct='%1.1f%%')
plt.show()

df_copy.head()

df_copy.drop(['Region'],axis=1,inplace=True)

df_copy.head()

x=df_copy.drop(['Classes'],axis=1)
y=df_copy['Classes']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

df_copy.corr()

sns.boxplot(df['FWI'],color='red')

"""Feature Selection"""

plt.figure(figsize=(12,10))
corr=x_train.corr()
sns.heatmap(corr,annot=True)
plt.show()

x_train.corr()

def correlation(dataset ,threshold):
  col_corr=set()
  corr_matrix = dataset.corr()
  for i in range(len(corr_matrix.columns)):
    for j in range(i):
      if abs(corr_matrix.iloc[i,j])>threshold:
        colname=corr_matrix.columns[i]
        col_corr.add(colname)
  return col_corr

corr_feature=correlation(x_train,0.85)

corr_feature

x_train.drop(corr_feature,axis=1,inplace=True)
x_test.drop(corr_feature,axis=1,inplace=True)
x_train.shape,x_test.shape

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)

plt.subplots(figsize=(15,5))
plt.subplot(1,2,1)
sns.boxplot(data=x_train)
plt.title('X_train brfore scaling')
plt.subplot(1,2,2)
sns.boxplot(data=x_train_scaled)
plt.title('X_train_scaled after scaling')
plt.show()

"""Linear Regression Model"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()
linear=LinearRegression()
linear.fit(x_train_scaled,y_train)
y_pred=linear.predict(x_test_scaled)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

"""Lasso Regrsion"""

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error,r2_score
lasso=Lasso(alpha=0.1)
lasso.fit(x_train_scaled,y_train)
y_pred=lasso.predict(x_test_scaled)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

"""Ridge Regression"""

from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error,r2_score
ridge=Ridge(alpha=0.1)
ridge.fit(x_train_scaled,y_train)
y_pred=ridge.predict(x_test_scaled)
mse=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

"""Elaticnet Regression"""

from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error,r2_score
elastic=ElasticNet()
elastic.fit(x_train_scaled,y_train)
y_pred=elastic.predict(x_test_scaled)
mae=mean_squared_error(y_test,y_pred)
r2=r2_score(y_test,y_pred)
print("MSE:",mse)
print("R2:",r2)

"""pickle file"""

import pickle
pickle.dump(scaler,open("scaler.pkl","wb"))
pickle.dump(ridge,open("ridge.pkl",'wb'))



from google.colab import drive
drive.mount('/content/drive')